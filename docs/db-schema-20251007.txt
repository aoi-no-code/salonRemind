DB Schema Snapshot (from Supabase UI screenshots)
Captured at: 2025-10-07

Note: This file transcribes what is visible in the screenshots. Fields used by the codebase but not visible in the screenshots are listed in an "Observed in code" section per table.


Table: customers (public.customers)
- Columns
  - id                uuid  PRIMARY KEY  DEFAULT gen_random_uuid()
  - user_id           uuid  (FK → auth.users.id)  customers_user_id_fkey
  - display_name      text  NULL
  - line_user_id      text  NULL
  - phone_number      text  NULL
  - created_at        timestamp  DEFAULT now()
- Foreign Keys
  - customers_user_id_fkey: user_id → auth.users.id
- Indexes
  - Primary key on id (implicit)
- Notes
  - UI indicates RLS/policy banner (policies may be required to query data)


Table: reservations (public.reservations)
- Columns (as seen in screenshots)
  - id                uuid  PRIMARY KEY  DEFAULT gen_random_uuid()
  - customer_id       uuid  NULL
  - store_id          uuid  NULL
  - start_at          timestamp  NULL
  - duration_min      int4  NULL
  - status            reservation (enum)  DEFAULT 'scheduled'::reservation
  - note              text  NULL
  - created_by        uuid  NULL
  - created_at        timestamp  DEFAULT now()
  - end_at            timestamp  NULL
- Foreign Keys
  - (Not explicitly visible in screenshot; likely) customer_id → customers.id
  - (Not explicitly visible in screenshot; likely) store_id → stores.id
- Indexes
  - Primary key on id (implicit)
- Enum: reservation
  - Values (from application usage): scheduled, cancelled, completed, change_requested
- Observed in code (not visible in screenshot)
  - link_token        text
  - link_status       text (values: pending, linked)
  - link_qr_url       text
  - link_expires_at   timestamp


Table: stores (public.stores)
- Columns
  - id                uuid  PRIMARY KEY  DEFAULT gen_random_uuid()
  - name              text  NULL
  - phone_number      text  NULL
  - address           text  NULL
  - created_at        timestamp  DEFAULT now()
- Foreign Keys
  - (None shown)
- Indexes
  - Primary key on id (implicit)
- Notes
  - UI indicates policy banner (policies may be required)


How this file was produced
- Transcribed directly from provided Supabase Table Editor screenshots.
- Supplemented with fields required by the codebase where screenshots did not display them (marked as "Observed in code").


-- New: reminder_logs (public.reminder_logs)
-- Purpose: Track reminder notification attempts and results across channels

do $$
begin
  if not exists (select 1 from pg_type where typname = 'reminder_kind') then
    create type public.reminder_kind as enum ('7d_before', '1d_before', 'same_day');
  end if;
end $$;

create table if not exists public.reminder_logs (
  id uuid primary key default gen_random_uuid(),
  reservation_id uuid not null references public.reservations(id) on delete cascade,
  kind public.reminder_kind not null,
  channel text not null default 'line',
  status text not null default 'sent',
  message_id text,
  error text,
  attempted_at timestamptz not null default now()
);

create unique index if not exists ux_reminder_logs_res_kind_channel
  on public.reminder_logs(reservation_id, kind, channel);

alter table public.reminder_logs enable row level security;

drop policy if exists "reminder logs service role all" on public.reminder_logs;
create policy "reminder logs service role all"
  on public.reminder_logs
  for all
  using (auth.role() = 'service_role')
  with check (auth.role() = 'service_role');

drop policy if exists "reminder logs admin read" on public.reminder_logs;
create policy "reminder logs admin read"
  on public.reminder_logs
  for select
  using ((auth.jwt() ->> 'role') = 'admin');


-- New: line_outbox (public.line_outbox)
-- Purpose: Store unsent LINE push messages for resend on follow/cron

create table if not exists public.line_outbox (
  id uuid primary key default gen_random_uuid(),
  customer_id uuid not null references public.customers(id) on delete cascade,
  reservation_id uuid references public.reservations(id) on delete set null,
  line_user_id text not null,
  message jsonb not null,
  status text not null default 'pending', -- pending | sent | failed
  last_error text,
  attempted_at timestamptz,
  created_at timestamptz not null default now(),
  sent_at timestamptz
);

create index if not exists ix_line_outbox_user_status on public.line_outbox(line_user_id, status);

alter table public.line_outbox enable row level security;

drop policy if exists "line_outbox service role all" on public.line_outbox;
create policy "line_outbox service role all"
  on public.line_outbox
  for all
  using (auth.role() = 'service_role')
  with check (auth.role() = 'service_role');
